/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package AddEmployee;

import static ConnectionClass.ConnectionClass.entityManager;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import ConnectionClass.Account;
import ConnectionClass.Department;
import ConnectionClass.Nhanvien;
import ConnectionClass.Positions;
import java.awt.Graphics2D;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.Icon;

/**
 *
 * @author msinp
 */
public class AddEmployeeForm extends javax.swing.JPanel {

    /**
     * Creates new form AddEmployeeForm
     */
    
    public AddEmployeeForm() {
        initComponents();
        load();
        
    }
    public Department phongBanSet(String pb){
        Query query = entityManager.createQuery("SELECT a FROM Department a");
      List<Department> dpList =  query.getResultList();
    for(Department dpDepartment : dpList){
    if(pb.equals(dpDepartment.getName()))
        return dpDepartment;
}
        return null;}
public Positions vitriSet(String pb){
        Query query = entityManager.createQuery("SELECT a FROM Positions a");
      List<Positions> dpList =  query.getResultList();
    for(Positions dpDepartment : dpList){
    if(pb.equals(dpDepartment.getName()))
        return dpDepartment;
}
return null;
    }
    public void load(){
       Query query2 = entityManager.createQuery("SELECT MAX(n.id) FROM Nhanvien n");
Integer maxId = (Integer) query2.getSingleResult()+1;

        IDLabel.setText(String.valueOf(maxId));
        DefaultComboBoxModel<String> postModel = new DefaultComboBoxModel<>();
        Query query = entityManager.createQuery("SELECT p.name FROM Positions p");
        List<String> positions = query.getResultList();
        for (String position : positions) {
        postModel.addElement(position);
}
postComboBox.setModel(postModel);
DefaultComboBoxModel<String> departModel=new DefaultComboBoxModel<>();
Query query1=entityManager.createQuery("SELECT d.name FROM Department d");
List<String> departmentList= query1.getResultList();
    for (String position : departmentList) {
        departModel.addElement(position);
}
    departmentComboBox1.setModel(departModel);
        System.out.println(departmentComboBox1.getSelectedItem().toString());
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        themLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        departmentLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();
        addressLabel = new javax.swing.JLabel();
        addressField = new javax.swing.JTextField();
        dobLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        IDLabel = new javax.swing.JLabel();
        salaryLabel = new javax.swing.JLabel();
        salaryField = new javax.swing.JTextField();
        startdateLabel = new javax.swing.JLabel();
        positionLabel = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        pictureLabel = new javax.swing.JLabel();
        departmentComboBox1 = new javax.swing.JComboBox<>();
        postComboBox = new javax.swing.JComboBox<>();
        maleRadioButton = new javax.swing.JRadioButton();
        femaleRadioButton = new javax.swing.JRadioButton();
        SaveButton = new javax.swing.JButton();
        emailLabel = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        dobDateChooser = new com.toedter.calendar.JDateChooser();
        startdateDateChooser = new com.toedter.calendar.JDateChooser();

        themLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        themLabel.setText("Thêm");

        jLabel1.setText("ID");

        nameLabel.setText("Tên");

        departmentLabel.setText("Phòng ban");

        phoneLabel.setText("Số điện thoại");

        addressLabel.setText("Địa chỉ");

        dobLabel.setText("Ngày sinh");

        genderLabel.setText("Giới tính");

        IDLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        IDLabel.setText("jLabel8");

        salaryLabel.setText("Lương");

        startdateLabel.setText("Ngày bắt đầu làm việc");

        positionLabel.setText("Vị trí làm việc");

        browseButton.setText("Duyệt");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        pictureLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AddEmployee/blank-profile-head-hi.png"))); // NOI18N
        pictureLabel.setText("jLabel2");

        departmentComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        postComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        maleRadioButton.setText("Nam");
        maleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleRadioButtonActionPerformed(evt);
            }
        });

        femaleRadioButton.setText("Nữ");
        femaleRadioButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                femaleRadioButtonStateChanged(evt);
            }
        });
        femaleRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleRadioButtonActionPerformed(evt);
            }
        });

        SaveButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        SaveButton.setForeground(new java.awt.Color(0, 153, 0));
        SaveButton.setText("Lưu");
        SaveButton.setActionCommand("save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        emailLabel.setText("Email");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(emailLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(nameLabel)
                                    .addGap(137, 137, 137)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(departmentLabel)
                                    .addGap(98, 98, 98)
                                    .addComponent(departmentComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(salaryLabel)
                                .addComponent(addressLabel)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(phoneLabel)
                                        .addComponent(startdateLabel)
                                        .addComponent(positionLabel)
                                        .addComponent(genderLabel)
                                        .addComponent(dobLabel))
                                    .addGap(38, 38, 38)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(phoneField, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                        .addComponent(addressField)
                                        .addComponent(salaryField)
                                        .addComponent(postComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(maleRadioButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(femaleRadioButton))
                                        .addComponent(dobDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(startdateDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(194, 194, 194)
                                .addComponent(IDLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(browseButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(283, 283, 283)
                .addComponent(themLabel)
                .addContainerGap(342, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(themLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(IDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(departmentLabel)
                            .addComponent(departmentComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailLabel)
                            .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneLabel)
                            .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressLabel)
                            .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dobLabel)
                            .addComponent(dobDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genderLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(maleRadioButton)
                                .addComponent(femaleRadioButton)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(salaryLabel)
                            .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(startdateLabel)
                            .addComponent(startdateDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(positionLabel)
                            .addComponent(postComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(pictureLabel)
                        .addGap(18, 18, 18)
                        .addComponent(browseButton)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
byte[] imageBytes;
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
    browseButton.addActionListener((ActionEvent e) -> {
        JFileChooser fileChooser1 = new JFileChooser();
        int result = fileChooser1.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser1.getSelectedFile();
            // Đọc hình ảnh từ tệp được chọn
            ImageIcon originalImageIcon = new ImageIcon(selectedFile.getAbsolutePath());
            // Thay đổi kích thước của hình ảnh để phù hợp với pictureLabel
            Image originalImage = originalImageIcon.getImage();
            Image scaledImage = originalImage.getScaledInstance(291, 234, Image.SCALE_SMOOTH);
            ImageIcon scaledImageIcon = new ImageIcon(scaledImage);
            // Hiển thị hình ảnh đã được thay đổi kích thước trên pictureLabel
            pictureLabel.setIcon(scaledImageIcon);
         

// Kiểm tra xem liệu người dùng đã chọn tệp hình ảnh từ JFileChooser hay không
if (fileChooser1.getSelectedFile() != null) {
    // Lấy đường dẫn tệp hình ảnh
    String imagePath = fileChooser1.getSelectedFile().getAbsolutePath();

    // Đọc dữ liệu hình ảnh từ tệp và lưu vào mảng byte[]
    try {
        Path path = Paths.get(imagePath);
        imageBytes = Files.readAllBytes(path);
    } catch (IOException x) {
        x.printStackTrace();
    }
} else {
    // Lấy dữ liệu hình ảnh từ JLabel
    Icon icon = pictureLabel.getIcon();
    if (icon instanceof ImageIcon) {
        Image image = ((ImageIcon) icon).getImage();
        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = bufferedImage.createGraphics();
        g2d.drawImage(image, 0, 0, null);
        g2d.dispose();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            ImageIO.write(bufferedImage, "jpg", baos);
            imageBytes = baos.toByteArray();
        } catch (IOException z) {
            z.printStackTrace();
        }
    }
}
        }
    });

    }//GEN-LAST:event_browseButtonActionPerformed

    private void maleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleRadioButtonActionPerformed
femaleRadioButton.setSelected(false);        // TODO add your handling code here:
    }//GEN-LAST:event_maleRadioButtonActionPerformed

    private void femaleRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleRadioButtonActionPerformed
maleRadioButton.setSelected(false);    // TODO add your handling code here:
    }//GEN-LAST:event_femaleRadioButtonActionPerformed

    private void femaleRadioButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_femaleRadioButtonStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleRadioButtonStateChanged

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
// bắt lỗi dữ liệu rỗng
if(addressField.getText().isEmpty()||phoneField.getText().isEmpty()||emailField.getText().isEmpty()|| nameField.getText().isEmpty()|| IDLabel.getText().isEmpty()
        ||dobDateChooser.getDate()==null||salaryField.getText().isEmpty()||startdateDateChooser.getDate()==null){
     JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin", "Lỗi", JOptionPane.ERROR_MESSAGE);
                       return;
}
// bắt lỗi tên không hợp lệ 
String str = nameField.getText();
for (int i = 0; i < str.length(); i++) {
    if (!Character.isLetter(str.charAt(i))) {
        JOptionPane.showMessageDialog(null, "Trong tên không được có số ", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }
}
// bắt lỗi ngày tháng
SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
dateFormat.setLenient(false);
try{
 Date dob =dobDateChooser.getDate();
 Date std =startdateDateChooser.getDate();
  dateFormat.parse(dateFormat.format(dob));
  dateFormat.parse(dateFormat.format(std));
     // Kiểm tra ngày sinh không được lớn hơn ngày hiện tại
            Calendar currentDate = Calendar.getInstance();
            Calendar dobCalendar = Calendar.getInstance();
            dobCalendar.setTime(dob);
            Calendar stdCalendar = Calendar.getInstance();
            stdCalendar.setTime(std);
            if (dobCalendar.after(currentDate)|| stdCalendar.after(currentDate)) {
                JOptionPane.showMessageDialog(null, "Ngày sinh hoặc ngày làm việc không được lớn hơn ngày hiện tại", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
            }
          // Kiểm tra start date không được nhỏ hơn ngày sinh và ít nhất là 18 năm sau ngày sinh
Calendar minDob = Calendar.getInstance();
minDob.setTime(dob);
minDob.add(Calendar.YEAR, 18);
if (stdCalendar.before(minDob)) {
    JOptionPane.showMessageDialog(null, "Ngày s việc phải lớn hơn hoặc bằng ngày sinh và ít nhất là 18 năm sau ngày sinh", "Lỗi", JOptionPane.ERROR_MESSAGE);
    return;
}
 }
catch(Exception e){
 JOptionPane.showMessageDialog(null, "Ngày tháng không hợp lệ. Vui lòng kiểm tra định dạng dd/MM/yyyy");
}
// bắt lỗi số điện thoại
     String sdtString =phoneField.getText();
     String reg = "^(0|\\+84)(\\s|\\.)?((3[2-9])|(5[689])|(7[06-9])|(8[1-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$";
     if (!sdtString.matches(reg)) {
        JOptionPane.showMessageDialog(null,"số điện thoại sai định dạng");
        return;
     }
//bắt lỗi email
String emailString=emailField.getText();
String emailRegex = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$";
if(!emailString.matches(emailRegex)){
     JOptionPane.showMessageDialog(null,"Email sai định dạng");
     return;
}
// Lấy hình ảnh từ JButton hoặc JLabel
// Tạo một mảng byte[] để lưu dữ liệu hình ảnh
try{

        Nhanvien nhanvien = new Nhanvien();
nhanvien.setId(Integer.parseInt(IDLabel.getText()));
nhanvien.setName(nameField.getText());
nhanvien.setPhone(phoneField.getText());
nhanvien.setEmail(emailField.getText());
nhanvien.setAddress(addressField.getText());
nhanvien.setDob(dobDateChooser.getDate());
nhanvien.setSalary(Double.valueOf(salaryField.getText()));
nhanvien.setGender(maleRadioButton.isSelected());
nhanvien.setStartDate(startdateDateChooser.getDate());
nhanvien.setDepartmentid(phongBanSet(departmentComboBox1.getSelectedItem().toString()));
nhanvien.setPostid(vitriSet(postComboBox.getSelectedItem().toString()));
nhanvien.setImage(imageBytes);
entityManager.getTransaction().begin();

// Thực hiện insert thông tin vào bảng nhanvien
entityManager.persist(nhanvien);

// Commit transaction
entityManager.getTransaction().commit();
JOptionPane.showMessageDialog(null, "Thao tác thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
}
catch(Exception e){
    e.printStackTrace();
}
// Đóng EntityManager
    }//GEN-LAST:event_SaveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel IDLabel;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JButton browseButton;
    private javax.swing.JComboBox<String> departmentComboBox1;
    private javax.swing.JLabel departmentLabel;
    private com.toedter.calendar.JDateChooser dobDateChooser;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JRadioButton femaleRadioButton;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton maleRadioButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JComboBox<String> postComboBox;
    private javax.swing.JTextField salaryField;
    private javax.swing.JLabel salaryLabel;
    private com.toedter.calendar.JDateChooser startdateDateChooser;
    private javax.swing.JLabel startdateLabel;
    private javax.swing.JLabel themLabel;
    // End of variables declaration//GEN-END:variables
}
